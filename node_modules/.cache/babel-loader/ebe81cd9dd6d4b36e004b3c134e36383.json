{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pstah\\\\web-projects\\\\pomodoro-timer\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakControl from \"./BreakControl\";\nimport FocusControl from \"./FocusControl\";\nimport TimerControl from \"./TimerControl\";\nimport TimerDisplay from \"./TimerDisplay\";\nimport ProgressDisplay from \"./ProgressDisplay\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        sessionTime: breakDuration\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n      sessionTime: focusDuration\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [isSessionActive, setIsSessionActive] = useState(false); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const MAXFocus = 60;\n  const MINFocus = 5;\n  const MAXBreak = 15;\n  const MINBreak = 1;\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  function stopSession() {\n    setIsTimerRunning(() => false);\n    setSession(() => null);\n    setIsSessionActive(() => false);\n  }\n  /**q\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setIsSessionActive(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: +focusDuration * 60,\n              sessionTime: +focusDuration\n            };\n          }\n\n          return { ...prevStateSession\n          };\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function updateFocusDuration(val) {\n    if (val >= MINFocus && val <= MAXFocus) {\n      setFocusDuration(() => val);\n    }\n  }\n\n  function updateBreakDuration(val) {\n    if (val >= MINBreak && val <= MAXBreak) {\n      setBreakDuration(() => val);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusControl, {\n    focusDuration: focusDuration,\n    updateFocusDuration: updateFocusDuration,\n    isDisabled: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakControl, {\n    breakDuration: breakDuration,\n    updateBreakDuration: updateBreakDuration,\n    isDisabled: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimerControl, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    isDisabled: isTimerRunning,\n    stopSession: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TimerDisplay, {\n    isTimerRunning: isTimerRunning,\n    isSessionActive: isSessionActive,\n    sessionLabel: session === null || session === void 0 ? void 0 : session.label,\n    sessionTime: session === null || session === void 0 ? void 0 : session.sessionTime,\n    sessionTimeToGo: session === null || session === void 0 ? void 0 : session.timeRemaining,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProgressDisplay, {\n    sessionTime: session === null || session === void 0 ? void 0 : session.sessionTime,\n    sessionTimeToGo: session === null || session === void 0 ? void 0 : session.timeRemaining,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/pstah/web-projects/pomodoro-timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","BreakControl","FocusControl","TimerControl","TimerDisplay","ProgressDisplay","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","sessionTime","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","isSessionActive","setIsSessionActive","setFocusDuration","setBreakDuration","MAXFocus","MINFocus","MAXBreak","MINBreak","Audio","play","stopSession","playPause","nextState","prevStateSession","updateFocusDuration","val","updateBreakDuration"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakControl from \"./BreakControl\";\nimport FocusControl from \"./FocusControl\";\nimport TimerControl from \"./TimerControl\";\nimport TimerDisplay from \"./TimerDisplay\";\nimport ProgressDisplay from \"./ProgressDisplay\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n        sessionTime: breakDuration,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n      sessionTime: focusDuration,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const MAXFocus = 60;\n  const MINFocus = 5;\n  const MAXBreak = 15;\n  const MINBreak = 1;\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function stopSession() {\n    setIsTimerRunning(() => false);\n    setSession(() => null);\n    setIsSessionActive(() => false);\n  }\n  /**q\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            setIsSessionActive(true);\n            return {\n              label: \"Focusing\",\n              timeRemaining: +focusDuration * 60,\n              sessionTime: +focusDuration,\n            };\n          }\n          return { ...prevStateSession };\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function updateFocusDuration(val) {\n    if (val >= MINFocus && val <= MAXFocus) {\n      setFocusDuration(() => val);\n    }\n  }\n\n  function updateBreakDuration(val) {\n    if (val >= MINBreak && val <= MAXBreak) {\n      setBreakDuration(() => val);\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusControl\n          focusDuration={focusDuration}\n          updateFocusDuration={updateFocusDuration}\n          isDisabled={isSessionActive}\n        />\n        <BreakControl\n          breakDuration={breakDuration}\n          updateBreakDuration={updateBreakDuration}\n          isDisabled={isSessionActive}\n        />\n      </div>\n      <div className=\"row\">\n        <TimerControl\n          playPause={playPause}\n          isTimerRunning={isTimerRunning}\n          isDisabled={isTimerRunning}\n          stopSession={stopSession}\n        />\n      </div>\n      <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <TimerDisplay\n            isTimerRunning={isTimerRunning}\n            isSessionActive={isSessionActive}\n            sessionLabel={session?.label}\n            sessionTime={session?.sessionTime}\n            sessionTimeToGo={session?.timeRemaining}\n          />\n        </div>\n        <div className=\"row mb-2\">\n          <ProgressDisplay\n            sessionTime={session?.sessionTime}\n            sessionTimeToGo={session?.timeRemaining}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}