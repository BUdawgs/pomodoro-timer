{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pstah\\\\web-projects\\\\pomodoro-timer\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusControl from \"./FocusControl\";\nimport BreakControl from \"./BreakControl\";\nimport TimerControl from \"./TimerControl\";\nimport TimerDisplay from \"./TimerDisplay\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n\n  const focusMinus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n\n  const focusPlus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const breakMinus = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n\n  const breakPlus = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusControl, {\n    focusMinus: focusMinus,\n    focusDuration: focusDuration,\n    focusPlus: focusPlus,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakControl, {\n    breakMinus: breakMinus,\n    breakDuration: breakDuration,\n    breakPlus: breakPlus,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TimerControl, {\n    isTimerRunning: isTimerRunning,\n    playPause: playPause,\n    session: session,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TimerDisplay, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/pstah/web-projects/pomodoro-timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","FocusControl","BreakControl","TimerControl","TimerDisplay","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","setFocusDuration","setBreakDuration","session","setSession","focusMinus","focusPlus","min","breakMinus","breakPlus","stop","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusControl from \"./FocusControl\";\nimport BreakControl from \"./BreakControl\";\nimport TimerControl from \"./TimerControl\";\nimport TimerDisplay from \"./TimerDisplay\";\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [session, setSession] = useState(null);\n  \n  const focusMinus = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n  const focusPlus = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const breakMinus = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n  const breakPlus = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const stop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusControl focusMinus={focusMinus}\n        focusDuration={focusDuration}\n        focusPlus={focusPlus} \n        session={session}\n        />\n        <BreakControl breakMinus={breakMinus}\n        breakDuration={breakDuration}\n        breakPlus={breakPlus}\n        session={session}\n        />  \n      </div>\n        <TimerControl isTimerRunning={isTimerRunning}\n          playPause={playPause} \n          session={session}\n          stop={stop}\n        />\n        <TimerDisplay session={session}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n        />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}